# E01 Luftqualitätmessung {.unnumbered}


Ziel dieser ersten Übung ist es den BME688 Sensor kennen zu lernen und die Sensordaten auszulesen. Der BME688 ist ein 4-in-1 Sensor für Temperatur, Luftdruck, Luftfeuchtigkeit und Gas Scanner VOC. Der Sensor verfügt über eine I2C Schnittstelle, die mit der Python Library [bme680-python](https://github.com/pimoroni/bme680-python) angesteuert und die Sensordaten ausgelesen werden können.

**Vorbereitung**

-   Lest das Kapitel im Anhang zu [Raspberry Pi](A1_Rasperry_Pi.qmd)
    -   Konzentriere Dich auf die wichtigsten Details zur Inbetriebnahme des Raspberry Pi
-   Lest die Dokumentation zum BME688 Sensor @bosch2022
    -   Konzentriere Dich auf die Beschreibung der Schnittstelle und technische Spezifikation auf dem Datenblatt

::: {.content-visible when-format="html"}
{{< video https://www.youtube.com/embed/4vdliMRtxBY >}}
:::

::: {.content-visible unless-format="html"}
[![Youtube Video: How gas sensing gets intelligent with BME688 and BME AI-Studio](images/youtube_bosch_bme688.png)](https://www.youtube.com/embed/4vdliMRtxBY)
:::
 **Unterlagen** |                                                                                                                                            |
|---------------|---------------------------------------------------------|
| Produkt        | [BME688 4-in-1 Air Quality Breakout](https://shop.pimoroni.com/products/bme688-breakout)                                                   |
| Datenblatt     | [Bosch Datasheet BME 688](https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bme688-ds000.pdf)                  |
| GitHub         | [bme680-python Library mit Beispielen](https://github.com/pimoroni/bme680-python)                                                          |
| Tutorial       | [Getting started with BME680 Breakout](https://learn.pimoroni.com/article/getting-started-with-bme680-breakout)                            |


## BME688\index{BME688}

BME688 - Bosch Sensor für Temperatur, Luftdruck, Luftfeuchtigkeit, Gas Scanner VOC (@fig-bme688)

-   Temperatur +/-0.5°C (-40° .. -85°)
-   Luftdruck +/-0.12hPa (300...1100hPa)
-   Luftfeuchtigkeit +/-3% (0 ...100%)
-   Gas Scanner VOC, VSCs (AI)
-   Python, C Library
-   Raspberry Pi Pins 1,3,5,7,9

![BME688 Bosch Sensor für Luftqualitätsmessung mit Referenzbild für den Grössenvergleich](images/BME688_wide.jpg){#fig-bme688}

## Übungsaufbau

-   Schliesse den Raspberry Pi an Monitor, Keyboard und Maus an oder verbinde Dich mit diesem über SSH (und SFTP).
-   Erstelle auf dem Raspberry Pi im `Documents` Ordner einen neuen Ordner `BME688`, in welchem Du Änderungen und neue Dateien für diese Übung speichern kannst.
-   Schliesse den Sensor **BME688** an den Raspberry Pi über die Breakout Garden **I2C** Schnittstelle an.

::: hint
**Sensor Ausrichtung beachten**

Beim Anschliessen der Sensoren in die Schnittstellen des Breakout Garden **unbedingt** die korrekte Ausrichtung beachten! Die Beschriftung der Anschlüsse auf dem Sensor und dem Breakout Garden müssen übereinstimmen!

![Sensor links korrekt angeschlossen, rechts falsch ausgerichtet angeschlossen.](images/raspberry_pi_correct_sensor_mount.png)
:::

### Kontrolle der Hardware

Kontrolliere mit dem Befehl `i2cdetect -y 1` ob der Raspberry Pi mit dem Sensor verbunden ist und der Raspberry Pi Zugriff auf den Sensor hat. Erscheint eine Zahl, dann hat der Raspberry Pi den Sensor auf dem I2C Bus erkannt. Falls Du mehr über das Program und den Befehl wissen möchtest, kannst Du mit dem Befehl `man i2cdetect` das Manual `man` aufrufen.

``` bash
i2cdetect -y 1
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:                         -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
70: -- -- -- -- -- -- 76 --  
```

`i2cdetect` installieren, falls das Programm nicht existiert:

``` bash
sudo apt-get update 
sudo apt install python3-smbus
sudo apt install i2c-tools
```

**Hinweis:** Damit der Befehl `i2cdetect` funktioniert, muss der I2C Bus aktiviert sein. Dies kann mit dem Befehl `sudo raspi-config` im Menü `Interfacing Options` und `I2C` aktiviert werden.

### Kontrolle der Installation

Teste ob die für die Übung erforderlichen Python Libraries installiert sind.

``` bash
python -c "import math"
0                                       # <1>
python -c "import numpy"
Traceback (most recent call last):      # <2>
  File "<string>", line 1, in <module>  # <2>
ImportError: No module named numpy      # <2>
```

1.  `math` Modul existiert
2.  `numpy` Modul existiert nicht

Installiere das Modul mit folgendem Befehl, falls es nicht installiert ist.

``` bash
sudo pip3 install bme680
```

### Kopiere (Clone) die Library mit den Beispielen auf den Raspberry Pi

Wechsle in den Ordner *Documents* und kopiere mit folgenden Befehlen die Library auf Deinen Raspberry Pi.

``` bash
cd Documents
git clone https://github.com/pimoroni/bme680-python 
cd bme680-python/examples
```

## Aufgabe 1: Sensormessungen ausführen

Teste das Beispiel `read-all.py` im Ordner *examples*. Dieses Beispiel gibt die Temperatur, Luftdruck und Luftfeuchtigkeit des Sensors BME 688 aus.

``` bash
python3 read-all.py
```

Mit `Ctrl+c` kann das Script wieder gestopppt werden. Die Ausgabe sollte in etwa so aussehen (gekürzt):

``` bash
# Output Beispiel
read-all.py - Displays temperature, pressure, humidity, and gas.
Press Ctrl+C to exit!

Calibration data:
par_gh1: -10
…

Initial reading:
gas_index: 0
gas_resistance: 1338124.79581836
heat_stable: False
humidity: 44.397
meas_index: 0
pressure: 990.82
status: 32
temperature: 28.89

Polling:
28.89 C,990.82 hPa,44.39 %RH
28.91 C,990.82 hPa,44.37 %RH,5684.846331497602 Ohms
28.94 C,990.80 hPa,44.31 %RH,5684.846331497602 Ohms
28.97 C,990.81 hPa,44.24 %RH,5684.846331497602 Ohms
29.00 C,990.81 hPa,44.19 %RH,5684.846331497602 Ohms
29.03 C,990.82 hPa,44.12 %RH,5684.846331497602 Ohms
```

Folgendes Code Snippet zeigt eine gekürtzte Version des read-all.py Python Beispiels, der die *Temperatur*, *Luftdruck* und *Luftfeuchtigkeit* mit der BME680 Library ausgibt.

``` python
#!/usr/bin/env python
import bme680
try:                                               
    sensor = bme680.BME680(bme680.I2C_ADDR_PRIMARY)   # <1>
except (RuntimeError, IOError):
    sensor = bme680.BME680(bme680.I2C_ADDR_SECONDARY) # <1>

# Oversampling Einstellungen
sensor.set_humidity_oversample(bme680.OS_2X)           # <2>
sensor.set_pressure_oversample(bme680.OS_4X)           # <2>
sensor.set_temperature_oversample(bme680.OS_8X)        # <2>
sensor.set_filter(bme680.FILTER_SIZE_3)                # <2>

print('Sensordaten:')
try:
    while True:
        if sensor.get_sensor_data():                             # <3>
            output = '{0:.2f} C,{1:.2f} hPa,{2:.3f} %RH'.format( # <3>
                sensor.data.temperature,                         # <3>
                sensor.data.pressure,                            # <3>
                sensor.data.humidity)                            # <3>
            print(output)
except KeyboardInterrupt:
    pass
```

1.  Testen der beiden möglichen I2C Adressen
2.  Oversampling Einstellungen können Messungen durch Mitteln verbessern und das Rauschen und Drifts reduzieren
3.  Sensordaten auslesen

::: exercise
**BME 688**\
Studiert die Python Skripte und online Tutorial zum Sensor

-   Wie wird auf den Sensor zugegriffen?
-   Wie wir die Temperatur kompensiert?
-   Wie kann ein Temperaturoffset gesetzt werden?
-   Wie reagiert der Feuchtigkeitssensor auf Änderungen?
-   Wie sieht es mit dem Luftdruck aus, was sind Vergleichswerte?
-   Wie könnt ihr einfach Werte in eine Datei schreiben?
:::

::: solution
Messwerte in eine Textdatei schreiben `python3 read-all.py > bme680-data.txt`. Die erstellte Datei kann mit dem Befehl `cat bme680-data.txt` angezeigt werden.
:::

## Aufgabe 2: Berechnung der Atmosphärenkorrektur für Distanzmessungen (optional)

Geödätische Distanzmessverfahren wie bei der Tachymetrie (Totalstationen) und Laserscanning benötigen eine Korrektur der Messwerte, um die Distanz zwischen zwei Punkten auf der Erde zu berechnen. Die Korrektur wird als *Atmosphärenkorrektur* bezeichnet und ist abhängig von der *Temperatur*, dem *Luftdruck* und der *Luftfeuchtigkeit*. Die Korrektur wird in ppm (parts per million) angegeben und kann mit folgender  @eq-atmosphaerenkorrektur berechnet werden [@grimm2023; @leicageosystems2022]:


$$\Delta D_1 = 286.338 - \begin{bmatrix}\frac{0.29535 \cdot p}{(1+\alpha \cdot t)}-\frac{4.126 \cdot 10^{-4} \cdot h}{(1+\alpha \cdot t)} \cdot 10^x\end{bmatrix}$$ {#eq-atmosphaerenkorrektur}

$$\begin{aligned}
& \Delta D_1 && \text{Atmosphärische Korrektur} && [ppm]\\
& p && \text{Luftdruck} && [mbar]\\
& t && \text{Lufttemperatur} && [°C]\\
& h && \text{relative Luftfeuchte} && [\%]\\
& \alpha && = \frac{1}{273.15} \\
& x && = (7.5 \cdot \frac{t}{237.3 +t}) + 0.7857 \\
\end{aligned}
$$

Folgende Funktion in Python berechnet die Atmosphärenkorrektur für Geodätische Distanzmessverfahren basierend auf der  @eq-atmosphaerenkorrektur

``` python
import math
def calculate_atmospheric_correction(temperature, air_pressure, humidity):
    # Constants
    ALPHA = 1 / 273.15
    X = (7.5 * temperature / (237.3 + temperature)) + 0.7857

    # Interim results
    denominator = 1 + ALPHA * temperature

    formula0 = 286.338
    formula1 = 0.29535 * air_pressure / denominator
    formula2 = 4.126 * 10 ** (-4) * humidity / denominator
    formula3 = 10 ** X

    # ppm-calculation
    correction_ppm = round(formula0 - (formula1 - formula2 * formula3), 2)

    # Return important values as a dictionary
    result = {
        "temperature": temperature,
        "air_pressure": air_pressure,
        "humidity": humidity,
        "correction_ppm": correction_ppm
    }
    return result
```

::: exercise
**Atmosphärenkorrektur**\
Nutzt die Funktion `calculate_atmospheric_correction` um die Korrektur für die folgenden Messwerte zu berechnen:

- Wie hoch ist die Korrektur mit den Werten des BME688 Sensors?
- Wie hoch ist dieselbe Korrektur bei doppelter Luftfeuchtigkeit?
- Wie hoch ist die Korrektur bei 20°C, 1000hPa und 50% sowie 100% Luftfeuchtigkeit?
:::